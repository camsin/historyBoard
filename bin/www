#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('historyboard:server');
var http = require('http');
const mongoose = require('mongoose');
const amqp = require('amqplib/callback_api');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var io = require('socket.io').listen(server);
// require('../sockets/base')(io);

var io = app.io;
io.attach(server);
const chat = io.of('/chat');

/* Database connection */

mongoose.connect("mongodb://camendez:123qwe@ds123956.mlab.com:23956/history-board",{
  useMongoClient: true
});

const db = mongoose.connection;
db.on('open',() => {
    rabbit();
    console.log('Conectado')
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});
db.on('error',(err)=>{
    console.log('Error al conectar a la base de datos');
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//Exchange: Recibe mensajes de productores y los empuja a colas dependiendo de las reglas definidas por el tipo de exchange
//Existen varios tipos de EXCHANGES, escogimos el FANOUT: Redirigen los mensajes recibidos a todas las colas enlazadas al mismo.
//ROUTING_KEY: es una llave que el exchange mira para decidir como enrutar el mensaje a las queues

function rabbit() {
    amqp.connect('amqp://dtnjyulk:yJ27rs4eQUW1ek6URIP35iR6MDgpgSvT@wasp.rmq.cloudamqp.com/dtnjyulk', function(err, conn) {

        conn.createChannel(function(err, ch) {
            var ROUTING_KEY = 'chat';
            var EXCHANGE = 'amq.fanout';

            ch.assertExchange(EXCHANGE, 'fanout', { durable: true });
            chat.on('connection',function(socket) {
                socket.on('mensaje',(msg)=>{
                    console.log("MENSAJE", msg);
                    let new_msg = new Buffer(JSON.stringify(msg));
                    ch.publish('amq.fanout', ROUTING_KEY, new_msg);
                });
            });
            ch.assertQueue('', { exclusive: true }, function(err, q) {
                ch.bindQueue(q.queue, 'amq.fanout', 'message_queues');
                ch.consume(q.queue, function(msg) {
                    chat.emit('mensaje', msg.content.toString());
                }, { noAck: false });
            });
        });
    });
}
server.close();
